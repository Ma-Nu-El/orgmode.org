#+TITLE: Colophon | Org-mode
#+setupfile: setup.org
#+description: Org: an Emacs Mode for Notes, Planning, and Authoring
#+include: "./resources/preamble.html" export html

* Org all the things
This website is created from org-mode documents. Just click the =</>= button on
the right end of the navbar to see the source of any page.

* Development
For easy development, there are some little snippets which make SASS
recompilation, HTML exporting, and ~rsync~ all happen automatically.

#+BEGIN_SRC emacs-lisp :exports code :results none
(defvar bulk-save nil)
(defvar batch-export nil)
(defvar org-website-folder (file-name-directory (buffer-file-name)))
(defun org-website-sync ()
  (let ((file-name (buffer-file-name)))
    (when (and (s-contains-p "orgweb" file-name)
               (not (and (s-contains-p "html" file-name)
                         (file-exists-p (s-replace ".html" ".org" file-name))))
               (not (s-contains-p ".git" file-name))
               (not batch-export))
      (when (s-contains-p ".scss" file-name)
        (setq sassc-output (shell-command-to-string
                            (format "sassc %s %s"
                                    file-name
                                    (concat (file-name-sans-extension file-name) ".css"))))
        (unless (string-empty-p sassc-output)
          (message "Sassc error: %s" sassc-output)))

      (when (s-contains-p ".org" file-name)
        (unless (string= (file-name-base file-name) "setup")
          (let ((org-html-style-default "")
                (org-html-scripts ""))
            (org-html-export-to-html)))
        (htmlize-file file-name (concat file-name ".html")))

      (unless bulk-save
        (message "= Performing bulk save (triggerd by %s." file-name)
        (let ((bulk-save t))
          (save-some-buffers t)

          (temp-buffer-window-show
           (get-buffer-create "*orgweb rsync*"))
          (set-process-sentinel
           (start-process
            "rsync"
            (get-buffer "*orgweb rsync*")
            "rsync"
            "-avz" "--delete" org-website-folder "imh:/home/thedia18/public_html/tecosaur.com/orgmode/")
           (lambda (p e)
             (when (= 0 (process-exit-status p))
               (delete-window (get-buffer-window "*orgweb rsync*"))))))))))


(add-hook 'after-save-hook #'org-website-sync)
#+END_SRC

#+BEGIN_SRC emacs-lisp :exports code :results none
(defun org-website-batch-export ()
  (interactive)
  (let ((batch-export t)
        (files (directory-files org-website-folder t "\\.org$"))
        (errors nil))
    (dolist (file files)
      (message "exporting: %s" file)
      (with-current-buffer (find-file-noselect file)
        (condition-case nil
            (org-html-export-to-html)
          (error (setq errors (append errors file))))))
    (message "finished exporting. Experienced errors with:%s" (if errors (concat "\n - " (s-join "\n - " errors)) ""))))
#+END_SRC

* Deployment
We use a little shell hack to immediately call Emacs on the file
#+begin_src shell :tangle build-html :shebang "#!/usr/bin/env sh" :comments none
":"; exec emacs --quick --script "$0" -- "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-
#+end_src
Then we can execute some elisp.
#+begin_src emacs-lisp :tangle build-html :comments none
(require 'ox)
(require 'ox-html)
(load "~/.emacs.d/.local/straight/repos/emacs-htmlize/htmlize.el" t t) ; system-dependant
(require 'htmlize)

(load "~/.emacs.d/.local/straight/repos/org-mode/contrib/lisp/ox-extra.el" t t)
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))

(setq
 org-html-style-default ""
 org-html-scripts ""
 org-html-htmlize-output-type 'css
 org-html-doctype "html5"
 org-html-html5-fancy t
 make-backup-files nil
 debug-on-error t)

(let ((scss-files (directory-files-recursively default-directory "\\.scss$"))
      (org-files (directory-files-recursively default-directory "\\.org$")))
  (if (executable-find "sassc")
    (dolist (scss-file scss-files)
      (let ((sassc-out
             (shell-command-to-string
              (format "sassc %s %s"
                      scss-file (concat (file-name-sans-extension scss-file) ".css")))))
        (message "\033[0;35m• %s%s\033[0m" (file-relative-name scss-file default-directory)
                 (if (string= "" sassc-out) "" (concat ":\033[31m\n" sassc-out)))))
    (message "No sassc executable found"))
  (dolist (org-file org-files)
    (message "\033[0;34m• %s\033[90m" (file-relative-name org-file default-directory))
    (with-current-buffer (find-file-literally org-file)
      (condition-case err
          (org-html-export-to-html)
        (error (message "  \033[0;31m%s\033[90m"  (error-message-string err)))))))
(message "\033[0m")
(kill-emacs 0)
#+end_src
